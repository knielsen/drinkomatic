#!/usr/bin/env python
import sqlite3, serial, hashlib, thread, time, readline

conn = sqlite3.connect('/opt/drinkomatic/micropay.db')
cursor = conn.cursor()
conn.isolation_level = None

card_reader = serial.Serial("/dev/ttyS0", baudrate=9600)
#barcode_reader = serial.Serial("/dev/ttyS0", baudrate=9600)

lastaction = time.time()

def read_card():
  try:
    h = hashlib.sha1()
    card = card_reader.readline(eol=chr(13))
    h.update(card)
    card = h.hexdigest().upper()
  except KeyboardInterrupt:
    card = "ABORT"
    pass
  return card

def read_barcode():
  try:
    code = barcode_reader.readline(eol=chr(13))
  except KeyboardInterrupt:
    print "Barcode read error!"
    pass
  return code

def dosale():
  print "="*30
  print "BEGIN SALE - Swipe card"
  card = read_card()
  if card != "ABORT":
    t = (card,)
    cursor.execute('select balance, member from accounts where hash = ?', t)
    r = cursor.fetchone()
    if r != None:
      print "Account holder: %s" % r[1]
      print "Account balance: %.2f" % r[0]
      print "-"*30
      barcode = raw_input("Scan barcode: ")
      while barcode != "x" and barcode != "+X":
        t = (barcode,)
        cursor.execute('select price, name from products where barcode = ?', t)
        r2 = cursor.fetchone()
        if r2!= None:
          price = r2[0]
          name = r2[1]
          t = (price,card)
          cursor.execute('update accounts set balance = balance - ? where hash = ?', t)
          t = (card,)
          cursor.execute('select balance from accounts where hash = ?', t)
          r3 = cursor.fetchone()
          print "%.2f\t%s\nBalance: %.2f" % (price,name,r3[0])
        else:
          print "Unknown product"
        barcode = raw_input("Scan barcode: ")
      card_reader.flushInput()
      return
    else:
      print "Unknown customer"
    print "="*30
  else:
    print "Aborted"

def pricelist():
    conn2 = sqlite3.connect('micropay.db')
    cursor2 = conn2.cursor()
    conn2.isolation_level = None

    print "="*50
    print "  PRICE LIST"
    print "-"*50
    cursor2.execute('select name, price from products order by price asc')
    r = cursor2.fetchall()
    for row in r:
      print "%40.40s   %.2f" % (row[0],row[1])
    print "-"*50


def pricelistthread():
  global lastaction
  while(True):
    if lastaction + 60 < time.time():
      pricelist()
      lastaction = time.time()


#thread.start_new_thread(pricelistthread,())

def main():

  while(True):
    cmd = raw_input("> ")
#  barcode_reader.flushInput()
#  cmd = read_barcode()
    lastaction = time.time()
    print "wooo"
    if cmd == "n" or cmd == "/": # new customer
      try:
        card_reader.flushInput()
        print "-"*30
        print "NEW CUSTOMER"
        name = raw_input("Member name: ")
        print "Swipe card"
        card = read_card()
        if card != "ABORT":
          print "Card read OK! %s" % card
          amount = int(raw_input("Inital deposit: "))
          print "Amount parsed as DKK %d" % amount
          t = (card,name,amount)
          cursor.execute('insert into accounts (hash,member,balance) values (?,?,?)', t)
          print "Account #%d created" % cursor.lastrowid
          print "-"*30
        else:
          print "Aborted"
      except KeyboardInterrupt:
        print "Aborted"
        pass 
      except ValueError:
        print "ERROR: Wrong value"
        pass 
      except sqlite3.IntegrityError:
        print "ERROR: Already exists"
        pass


    if cmd == "N" or cmd == "+": # new product
      try:
        print "-"*30
        print "NEW PRODUCT"
        name = raw_input("Product name: ")
        price = int(raw_input("Price: "))
        print "Price parsed as DKK %d" % price
        barcode = raw_input("Scan barcode: ")
        t = (name,price,barcode)
        cursor.execute('insert into products (name,price,barcode) values (?,?,?)', t)
        print "Product #%d created" % cursor.lastrowid
        print "-"*30
      
      except KeyboardInterrupt:
        print "Aborted"
        pass 
      except ValueError:
        print "ERROR: Wrong value"
        pass 
      except sqlite3.IntegrityError:
        print "ERROR: Already exists"
        pass

    if cmd == "b" or cmd == "0": # balance
      try:
        card_reader.flushInput()
        print "-"*30
        print "BALANCE CHECK - Swipe card"
        card = read_card()
        if card != "ABORT":
          t = (card,)
          cursor.execute('select balance from accounts where hash = ?', t)
          r = cursor.fetchone()
          if r != None:
            print "Balance: %.2f" % r[0]
          else:
            print "Unknown card"
          print "-"*30
        else:
          print "Aborted"
      except sqlite3.IntegrityError:
        print "ERROR: Already exists"
        pass
      except KeyboardInterrupt:
        print "Aborted"
        pass 

    if cmd == "i" or cmd == "*": # charge card
      try:
        card_reader.flushInput()
        print "-"*30
        print "INSERT MONEY - Swipe card"
        card = read_card()
        if card != "ABORT":
          t = (card,)
          cursor.execute('select balance from accounts where hash = ?', t)
          r = cursor.fetchone()
          if r != None:
            print "Balance: %.2f" % r[0]
            amount = int(raw_input("Insert deposit: "))
            print "Amount parsed as DKK %d" % amount
            t = (amount,card)
            cursor.execute('update accounts set balance = balance + ? where hash = ?', t)
            t = (card,)
            cursor.execute('select balance from accounts where hash = ?', t)
            r2 = cursor.fetchone()
            print "Balance: %.2f" % r2[0]
          else:
            print "Unknown card"
          
          print "-"*30
        else:
          print "Aborted"
      except sqlite3.IntegrityError:
        print "ERROR: Already exists"
        pass
    

    if cmd == "p" or cmd == ".": # price check
      try:
        card_reader.flushInput()
        print "-"*30
        print "PRICE CHECK"
        barcode = raw_input("Scan barcode: ")
        t = (barcode,)
        cursor.execute('select price, name from products where barcode = ?', t)
        r = cursor.fetchone()
        if r != None:
          print "%s\nPrice: %.2f" % (r[1],r[0])
        else:
          print "Unknown product"
        print "-"*30
      except sqlite3.IntegrityError:
        print "ERROR: Already exists"
        pass


    if cmd == "u" or cmd == "1": # update price
      try:
        card_reader.flushInput()
        print "-"*30
        print "UPDATE PRICE"
        barcode = raw_input("Scan barcode: ")
        t = (barcode,)
        cursor.execute('select price from products where barcode = ?', t)
        r = cursor.fetchone()
        if r != None:
          print "Price: %.2f" % r[0]
          amount = int(raw_input("New price: "))
          print "Price parsed as DKK %d" % amount
          t = (amount,barcode)
          cursor.execute('update products set price = ? where barcode = ?', t)
          print "Price updated"
        else:
          print "Unknown product"
        print "-"*30
      except sqlite3.IntegrityError:
        print "ERROR: Already exists"
        pass

    if cmd == "s" or cmd == "-":
      dosale()

    if cmd == "l":
      pricelist()

while(True):
  try:    
    main()
  except EOFError:
    print "There is no escape!"
  except KeyboardInterrupt:
    print "There is no escape!"
